# TYPESCRIPT İLE REACT NATIVE ÖĞRENME PLANI
# ParamiYönet Benzeri Finans Uygulaması Geliştirme Rehberi

## 📋 UYGULAMA ANALİZİ (PARAMIYÖNET)

### Teknik Mimari:
- React Native + TypeScript (Modern ve tip güvenli)
- Expo framework kullanımı 
- Firebase (Authentication + Firestore Database)
- MobX state management 
- MVVM tasarım deseni (ViewModel pattern)
- Context API ile global state yönetimi
- React Navigation ile routing

### Ana Özellikler:
1. Kimlik Doğrulama - Firebase Auth ile giriş/kayıt
2. Hesap Yönetimi - Nakit, banka kartı, kredi kartı, altın hesapları
3. İşlem Takibi - Gelir/gider işlemleri
4. Raporlama & Analitik - Grafik tabanlı raporlar
5. Kredi Kartı Yönetimi - Borç takibi ve ödeme planlaması
6. Altın Fiyat Takibi - Canlı altın fiyatları
7. Bütçe Yönetimi - Kategori bazlı bütçeleme
8. Tekrarlayan Ödemeler - Otomatik ödeme takibi

## 🗓️ 10 HAFTALIK ÖĞRENİM PLANI

### 📌 1. HAFTA - TYPESCRIPT TEMELLERİ

#### Gün 1-2: TypeScript Basics
Konular:
- TypeScript nedir, neden kullanılır?
- Basic types: string, number, boolean, array, object
- Type annotation ve type inference
- Union types ve intersection types
- Literal types

Pratik Örnekler:
```typescript
// Temel tipler
let name: string = "Gökhan";
let age: number = 25;
let isActive: boolean = true;
let amounts: number[] = [100, 200, 300];

// Union types
let status: "pending" | "completed" | "failed" = "pending";

// Type annotation
function calculateTotal(amount: number, tax: number): number {
  return amount + (amount * tax);
}
```

#### Gün 3-4: Interfaces ve Types
Konular:
- Interface tanımlama ve kullanımı
- Type alias kullanımı
- Optional properties (?:)
- Readonly properties
- Index signatures

Pratik Örnekler:
```typescript
// Interface tanımlama
interface User {
  id: string;
  name: string;
  email: string;
  age?: number; // optional
  readonly createdAt: Date; // readonly
}

// Type alias
type Currency = 'TRY' | 'USD' | 'EUR' | 'GBP';
type TransactionType = 'income' | 'expense';

// Index signature
interface AccountBalances {
  [accountId: string]: number;
}
```

#### Gün 5-7: Advanced TypeScript
Konular:
- Enum kullanımı
- Generic types
- Utility types (Partial, Pick, Omit, Record)
- Function types ve arrow functions
- Async/await typing

Pratik Örnekler:
```typescript
// Enum kullanımı
enum AccountType {
  CASH = 'cash',
  DEBIT_CARD = 'debit_card',
  CREDIT_CARD = 'credit_card',
  SAVINGS = 'savings'
}

// Generic types
interface ApiResponse<T> {
  data: T;
  success: boolean;
  message?: string;
}

// Utility types
type CreateUserRequest = Omit<User, 'id' | 'createdAt'>;
type UpdateUserRequest = Partial<Pick<User, 'name' | 'email'>>;

// Function types
type EventHandler = (event: string) => void;
type AsyncFunction<T> = () => Promise<T>;
```

### 📌 2. HAFTA - REACT NATIVE KURULUM & BASICS

#### Gün 1-2: Environment Setup
Konular:
- Node.js ve npm kurulumu
- Expo CLI kurulumu
- Android Studio / Xcode setup
- VS Code extensions (ES7+ React/Redux/React-Native snippets, TypeScript Hero)
- Git kurulumu ve GitHub hesabı

Komutlar:
```bash
# Node.js kontrol
node --version
npm --version

# Expo CLI kurulumu
npm install -g expo-cli

# Yeni proje oluşturma
npx create-expo-app MyFinanceApp --template blank-typescript

# Proje dizinine geçiş
cd MyFinanceApp

# Geliştirme sunucusu başlatma
expo start
```

#### Gün 3-5: Core Components
Konular:
- View, Text, StyleSheet kullanımı
- Flexbox layout sistemi
- TouchableOpacity, Button, Pressable
- Image ve Icon kullanımı
- ScrollView ve KeyboardAvoidingView

Pratik Örnekler:
```typescript
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';

interface Props {
  title: string;
  onPress: () => void;
}

const CustomButton: React.FC<Props> = ({ title, onPress }) => {
  return (
    <TouchableOpacity style={styles.button} onPress={onPress}>
      <Text style={styles.buttonText}>{title}</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  button: {
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});
```

#### Gün 6-7: Lists ve Forms
Konular:
- FlatList ile liste gösterimi
- TextInput ile form oluşturma
- Keyboard handling
- Form validation
- State management with useState

Pratik Örnekler:
```typescript
import React, { useState } from 'react';
import { View, FlatList, TextInput, Alert } from 'react-native';

interface Transaction {
  id: string;
  amount: number;
  description: string;
  type: 'income' | 'expense';
}

const TransactionList: React.FC = () => {
  const [transactions] = useState<Transaction[]>([
    { id: '1', amount: 1000, description: 'Maaş', type: 'income' },
    { id: '2', amount: 50, description: 'Kahve', type: 'expense' },
  ]);

  const renderTransaction = ({ item }: { item: Transaction }) => (
    <View style={styles.transactionItem}>
      <Text>{item.description}</Text>
      <Text style={{ color: item.type === 'income' ? 'green' : 'red' }}>
        {item.type === 'income' ? '+' : '-'}₺{item.amount}
      </Text>
    </View>
  );

  return (
    <FlatList
      data={transactions}
      keyExtractor={(item) => item.id}
      renderItem={renderTransaction}
    />
  );
};
```

### 📌 3. HAFTA - NAVIGATION & STATE MANAGEMENT

#### Gün 1-3: React Navigation
Konular:
- React Navigation kurulumu
- Stack Navigator kullanımı
- Tab Navigator (Bottom Tabs)
- Navigation params ve typing
- Navigation lifecycle
- Header customization

Kurulum:
```bash
npm install @react-navigation/native
npm install @react-navigation/stack
npm install @react-navigation/bottom-tabs
expo install react-native-screens react-native-safe-area-context
```

Pratik Örnekler:
```typescript
import { createStackNavigator } from '@react-navigation/stack';
import { NavigationContainer } from '@react-navigation/native';

// Navigation types
type RootStackParamList = {
  Home: undefined;
  AddTransaction: { defaultType?: 'income' | 'expense' };
  TransactionDetail: { transactionId: string };
};

const Stack = createStackNavigator<RootStackParamList>();

function AppNavigator() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="AddTransaction" component={AddTransactionScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}
```

#### Gün 4-7: Context API & State Management
Konular:
- Context API kullanımı
- useContext hook
- Custom hooks oluşturma
- Global state management
- Provider pattern
- State persistence

Pratik Örnekler:
```typescript
import React, { createContext, useContext, useState, ReactNode } from 'react';

interface User {
  id: string;
  name: string;
  email: string;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(false);

  const login = async (email: string, password: string) => {
    setLoading(true);
    try {
      // Login logic here
      const userData = { id: '1', name: 'Test User', email };
      setUser(userData);
    } catch (error) {
      console.error('Login error:', error);
    } finally {
      setLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, loading, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

// Custom hook
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};
```

### 📌 4. HAFTA - FIREBASE INTEGRATION

#### Gün 1-3: Firebase Setup
Konular:
- Firebase projesi oluşturma
- React Native için Firebase kurulumu
- Firebase config dosyası oluşturma
- Firebase Authentication setup
- Firestore Database setup

Kurulum:
```bash
npm install firebase
```

Firebase Config:
```typescript
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: "your-api-key",
  authDomain: "your-app.firebaseapp.com",
  projectId: "your-project-id",
  storageBucket: "your-app.appspot.com",
  messagingSenderId: "123456789",
  appId: "your-app-id"
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestore(app);
```

#### Gün 4-5: Authentication
Konular:
- Email/Password authentication
- User registration
- Login/Logout functionality
- Auth state persistence
- Password reset
- Form validation

Pratik Örnekler:
```typescript
import { 
  signInWithEmailAndPassword, 
  createUserWithEmailAndPassword,
  signOut,
  onAuthStateChanged 
} from 'firebase/auth';
import { auth } from '../config/firebase';

export const AuthService = {
  // Kullanıcı girişi
  async login(email: string, password: string) {
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      return { success: true, user: userCredential.user };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  },

  // Kullanıcı kaydı
  async register(email: string, password: string) {
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      return { success: true, user: userCredential.user };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  },

  // Çıkış
  async logout() {
    try {
      await signOut(auth);
      return { success: true };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  },

  // Auth state dinleyici
  onAuthStateChange(callback: (user: any) => void) {
    return onAuthStateChanged(auth, callback);
  }
};
```

#### Gün 6-7: Firestore Operations
Konular:
- Firestore collection yapısı
- Document ekleme, okuma, güncelleme, silme (CRUD)
- Query operations
- Real-time listeners
- Batch operations
- Data modeling

Pratik Örnekler:
```typescript
import { 
  collection, 
  addDoc, 
  getDocs, 
  doc, 
  updateDoc, 
  deleteDoc,
  query,
  where,
  orderBy 
} from 'firebase/firestore';
import { db } from '../config/firebase';

interface Transaction {
  id?: string;
  userId: string;
  amount: number;
  type: 'income' | 'expense';
  category: string;
  description: string;
  date: Date;
}

export const TransactionService = {
  // İşlem ekleme
  async addTransaction(transaction: Omit<Transaction, 'id'>) {
    try {
      const docRef = await addDoc(collection(db, 'transactions'), {
        ...transaction,
        date: new Date()
      });
      return { success: true, id: docRef.id };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  },

  // Kullanıcının işlemlerini getirme
  async getUserTransactions(userId: string) {
    try {
      const q = query(
        collection(db, 'transactions'),
        where('userId', '==', userId),
        orderBy('date', 'desc')
      );
      const querySnapshot = await getDocs(q);
      const transactions = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as Transaction[];
      
      return { success: true, data: transactions };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  },

  // İşlem güncelleme
  async updateTransaction(id: string, updates: Partial<Transaction>) {
    try {
      const docRef = doc(db, 'transactions', id);
      await updateDoc(docRef, updates);
      return { success: true };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  },

  // İşlem silme
  async deleteTransaction(id: string) {
    try {
      await deleteDoc(doc(db, 'transactions', id));
      return { success: true };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }
};
```

### 📌 5. HAFTA - CORE FEATURES DEVELOPMENT (AUTH & ACCOUNTS)

#### Gün 1-3: Authentication Screens
Konular:
- Login screen tasarımı
- Register screen tasarımı
- Form validation
- Loading states
- Error handling
- User experience improvements

Login Screen Örneği:
```typescript
import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, Alert } from 'react-native';
import { useAuth } from '../contexts/AuthContext';

const LoginScreen: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const { login } = useAuth();

  const validateForm = () => {
    if (!email.trim()) {
      Alert.alert('Hata', 'E-posta adresi gerekli');
      return false;
    }
    if (!password.trim()) {
      Alert.alert('Hata', 'Şifre gerekli');
      return false;
    }
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      Alert.alert('Hata', 'Geçerli bir e-posta adresi girin');
      return false;
    }
    return true;
  };

  const handleLogin = async () => {
    if (!validateForm()) return;
    
    setLoading(true);
    try {
      await login(email, password);
    } catch (error: any) {
      Alert.alert('Giriş Hatası', error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Giriş Yap</Text>
      
      <TextInput
        style={styles.input}
        placeholder="E-posta"
        value={email}
        onChangeText={setEmail}
        keyboardType="email-address"
        autoCapitalize="none"
      />
      
      <TextInput
        style={styles.input}
        placeholder="Şifre"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      
      <TouchableOpacity 
        style={[styles.button, loading && styles.buttonDisabled]}
        onPress={handleLogin}
        disabled={loading}
      >
        <Text style={styles.buttonText}>
          {loading ? 'Giriş yapılıyor...' : 'Giriş Yap'}
        </Text>
      </TouchableOpacity>
    </View>
  );
};
```

#### Gün 4-7: Account Management
Konular:
- Account model tasarımı
- Account service oluşturma
- Account list screen
- Add/Edit account screen
- Account types (cash, credit card, etc.)
- Account balance calculations

Account Model:
```typescript
export interface Account {
  id: string;
  userId: string;
  name: string;
  type: AccountType;
  balance: number;
  color: string;
  icon: string;
  createdAt: Date;
  updatedAt: Date;
  isActive: boolean;
}

export enum AccountType {
  CASH = 'cash',
  DEBIT_CARD = 'debit_card',
  CREDIT_CARD = 'credit_card',
  SAVINGS = 'savings',
  INVESTMENT = 'investment'
}
```

### 📌 6. HAFTA - TRANSACTION MANAGEMENT

#### Gün 1-4: Transaction Features
Konular:
- Transaction model tasarımı
- Add transaction screen
- Transaction list screen
- Category management
- Income/Expense tracking
- Transaction filters

Transaction Model:
```typescript
export interface Transaction {
  id: string;
  userId: string;
  accountId: string;
  amount: number;
  type: 'income' | 'expense';
  category: string;
  description: string;
  date: Date;
  tags?: string[];
  location?: string;
  receipt?: string;
}
```

Add Transaction Screen:
```typescript
const AddTransactionScreen: React.FC = () => {
  const [amount, setAmount] = useState('');
  const [type, setType] = useState<'income' | 'expense'>('expense');
  const [category, setCategory] = useState('');
  const [description, setDescription] = useState('');
  const [selectedAccount, setSelectedAccount] = useState<Account | null>(null);

  const handleSave = async () => {
    const transaction: Omit<Transaction, 'id'> = {
      userId: user.id,
      accountId: selectedAccount!.id,
      amount: parseFloat(amount),
      type,
      category,
      description,
      date: new Date()
    };

    const result = await TransactionService.addTransaction(transaction);
    if (result.success) {
      navigation.goBack();
    }
  };

  return (
    <View style={styles.container}>
      {/* Form components */}
    </View>
  );
};
```

#### Gün 5-7: Categories & Filters
Konular:
- Category system tasarımı
- Predefined categories
- Custom categories
- Category icons ve colors
- Transaction filtering
- Search functionality

### 📌 7. HAFTA - CHARTS & ANALYTICS

#### Gün 1-3: Chart Library Setup
Konular:
- react-native-chart-kit kurulumu
- Chart types (Line, Bar, Pie)
- Data formatting for charts
- Responsive chart design
- Chart interactions

Kurulum:
```bash
npm install react-native-chart-kit react-native-svg
```

Chart Examples:
```typescript
import { LineChart, PieChart } from 'react-native-chart-kit';

const ExpenseChart: React.FC = () => {
  const data = {
    labels: ['Oca', 'Şub', 'Mar', 'Nis', 'May'],
    datasets: [{
      data: [1000, 1500, 1200, 1800, 1300],
      color: (opacity = 1) => `rgba(255, 99, 132, ${opacity})`
    }]
  };

  return (
    <LineChart
      data={data}
      width={300}
      height={200}
      chartConfig={{
        backgroundColor: '#000',
        backgroundGradientFrom: '#000',
        backgroundGradientTo: '#000',
        color: (opacity = 1) => `rgba(0, 122, 255, ${opacity})`,
        labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,
      }}
      bezier
    />
  );
};
```

#### Gün 4-7: Analytics Features
Konular:
- Dashboard analytics
- Income/Expense trends
- Category breakdown
- Monthly/Yearly reports
- Budget vs actual spending
- Financial insights

### 📌 8. HAFTA - ADVANCED FEATURES

#### Gün 1-3: Budget Management
Konular:
- Budget model tasarımı
- Budget creation ve editing
- Budget tracking
- Budget notifications
- Budget vs actual comparison

Budget Model:
```typescript
export interface Budget {
  id: string;
  userId: string;
  name: string;
  amount: number;
  spent: number;
  category: string;
  period: 'monthly' | 'weekly' | 'yearly';
  startDate: Date;
  endDate: Date;
  isActive: boolean;
}
```

#### Gün 4-7: Recurring Transactions
Konular:
- Recurring transaction model
- Frequency options (daily, weekly, monthly)
- Auto-creation logic
- Notification system
- Management interface

### 📌 9. HAFTA - POLISH & TESTING

#### Gün 1-3: UI/UX Improvements
Konular:
- Dark/Light theme implementation
- Animation ve transitions
- Loading states
- Error boundaries
- Accessibility improvements

Theme Implementation:
```typescript
interface Theme {
  colors: {
    primary: string;
    background: string;
    surface: string;
    text: string;
    border: string;
  };
}

const lightTheme: Theme = {
  colors: {
    primary: '#007AFF',
    background: '#FFFFFF',
    surface: '#F2F2F7',
    text: '#000000',
    border: '#C6C6C8',
  }
};

const darkTheme: Theme = {
  colors: {
    primary: '#007AFF',
    background: '#000000',
    surface: '#1C1C1E',
    text: '#FFFFFF',
    border: '#38383A',
  }
};
```

#### Gün 4-7: Testing
Konular:
- Unit testing with Jest
- Component testing
- Integration testing
- Mock implementations
- Test coverage

Testing Setup:
```bash
npm install --save-dev @testing-library/react-native jest
```

Test Example:
```typescript
import { render, fireEvent } from '@testing-library/react-native';
import LoginScreen from './LoginScreen';

describe('LoginScreen', () => {
  test('validates email input', () => {
    const { getByPlaceholderText, getByText } = render(<LoginScreen />);
    
    const emailInput = getByPlaceholderText('E-posta');
    const loginButton = getByText('Giriş Yap');
    
    fireEvent.changeText(emailInput, 'invalid-email');
    fireEvent.press(loginButton);
    
    expect(getByText('Geçerli bir e-posta adresi girin')).toBeTruthy();
  });
});
```

### 📌 10. HAFTA - DEPLOYMENT & OPTIMIZATION

#### Gün 1-3: Performance Optimization
Konular:
- React.memo kullanımı
- useCallback ve useMemo
- List optimization
- Image optimization
- Bundle size optimization

#### Gün 4-7: Deployment
Konular:
- EAS Build setup
- Environment variables
- App store preparation
- Play Store preparation
- CI/CD setup

Deployment Commands:
```bash
# EAS Build setup
npm install -g @expo/eas-cli
eas login
eas build:configure

# Android build
eas build --platform android

# iOS build
eas build --platform ios

# Submit to stores
eas submit --platform android
eas submit --platform ios
```

## 📚 KAYNAK LİSTESİ

### Resmi Dokümantasyonlar:
1. TypeScript Handbook - https://www.typescriptlang.org/docs/
2. React Native Docs - https://reactnative.dev/docs/getting-started
3. Expo Documentation - https://docs.expo.dev/
4. Firebase Docs - https://firebase.google.com/docs
5. React Navigation - https://reactnavigation.org/docs/getting-started

### Video Kanalları:
1. Maximilian Schwarzmüller (Academind)
2. The Net Ninja
3. Programming with Mosh
4. William Candillon (React Native Animations)

### Kitaplar:
1. "Learning React Native" - Bonnie Eisenman
2. "React Native in Action" - Nader Dabit
3. "Fullstack React Native" - Devin Abbott

### Online Kurslar:
1. Udemy - React Native Complete Course
2. Coursera - React Native Specialization
3. Pluralsight - React Native Learning Path

## 🎯 GÜNLÜK ÇALIŞMA PLANI

### Her Gün:
- Minimum 2 saat kod yazma
- 30 dakika dokümantasyon okuma
- 30 dakika video tutorial izleme

### Haftalık:
- 1 küçük proje tamamlama
- GitHub'a kod push etme
- Stack Overflow'da soru/cevap
- React Native community'ye katılım

### Aylık:
- Bir önceki ayı değerlendirme
- Yeni teknolojileri araştırma
- Portfolio güncelleme
- Mentor bulma/network kurma

## 🚀 PROJE MİLESTONELARI

### 1. Hafta Sonu: TypeScript Quiz Uygulaması
### 2. Hafta Sonu: Todo List Uygulaması
### 3. Hafta Sonu: Multi-screen Navigation Uygulaması
### 4. Hafta Sonu: Firebase Auth ile Login Uygulaması
### 5. Hafta Sonu: CRUD işlemleri ile Note Uygulaması
### 6. Hafta Sonu: Basit Expense Tracker
### 7. Hafta Sonu: Chart'lı Analytics Dashboard
### 8. Hafta Sonu: Budget Management Uygulaması
### 9. Hafta Sonu: Test edilmiş Production-ready Uygulama
### 10. Hafta Sonu: App Store'da Yayınlanmış Uygulama

## 💡 BAŞARI İPUÇLARI

1. **Tutarlılık**: Her gün biraz ilerleme kaydetmek, haftasonları yoğun çalışmaktan daha etkilidir
2. **Pratik Odaklı**: Teoriden çok pratik yapın, her öğrendiğinizi hemen kodlayın
3. **Hata Yönetimi**: Hatalardan korkmayın, debugging becerilerinizi geliştirin
4. **Community**: React Native topluluklarına katılın, sorularınızı sorun
5. **Portfolio**: GitHub'da aktif olun, projelerinizi sergileyin
6. **Güncel Kalın**: React Native hızla gelişen bir teknoloji, güncel tutorialları takip edin
7. **Performance**: Baştan performansı düşünün, sonradan optimize etmek daha zordur
8. **Testing**: Test yazmayı alışkanlık haline getirin
9. **Documentation**: Kendi kodunuzu dokümante edin
10. **Patience**: Öğrenme süreci zaman alır, sabırlı olun

## 🔧 GELİŞTİRME ARAÇLARI

### IDE/Editor:
- VS Code (önerilen)
- React Native Tools extension
- TypeScript Hero extension
- ES7+ React/Redux/React-Native snippets
- GitLens extension

### Debugging:
- React Native Debugger
- Flipper
- Chrome DevTools
- Reactotron

### Testing:
- Jest
- React Native Testing Library
- Detox (E2E testing)

### Build Tools:
- EAS Build
- Fastlane
- CodePush

Bu plan size 10 hafta içinde TypeScript ile React Native kullanarak ParamiYönet benzeri bir finans uygulaması geliştirme becerisi kazandıracaktır. Her hafta sonunda küçük projeler yaparak öğrendiklerinizi pekiştirin ve büyük projeye doğru adım adım ilerleyin!
